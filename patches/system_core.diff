diff --git a/include/cutils/iosched_policy.h b/include/cutils/iosched_policy.h
index 07c5d1f..25b87ba 100644
--- a/include/cutils/iosched_policy.h
+++ b/include/cutils/iosched_policy.h
@@ -31,6 +31,8 @@ typedef enum {
 extern int android_set_ioprio(int pid, IoSchedClass clazz, int ioprio);
 extern int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio);
 
+extern int android_set_rt_ioprio(int pid, int rt);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/include/system/graphics.h b/include/system/graphics.h
index c226e90..d26dfd4 100644
--- a/include/system/graphics.h
+++ b/include/system/graphics.h
@@ -461,7 +461,21 @@ enum {
     /* Legacy formats (deprecated), used by ImageFormat.java */
     HAL_PIXEL_FORMAT_YCbCr_422_SP       = 0x10, // NV16
     HAL_PIXEL_FORMAT_YCrCb_420_SP       = 0x11, // NV21
-    HAL_PIXEL_FORMAT_YCbCr_422_I        = 0x14, // YUY2
+    #ifdef SPRD_HARDWARE
+      HAL_PIXEL_FORMAT_YCbCr_422_P        = 0x12,
+      HAL_PIXEL_FORMAT_YCbCr_420_P        = 0x13,
+    #endif
+      HAL_PIXEL_FORMAT_YCbCr_422_I        = 0x14, // YUY2
+    #ifdef SPRD_HARDWARE
+      HAL_PIXEL_FORMAT_YCbCr_420_I        = 0x15,
+      HAL_PIXEL_FORMAT_CbYCrY_422_I       = 0x16,
+      HAL_PIXEL_FORMAT_CbYCrY_420_I       = 0x17,
+      HAL_PIXEL_FORMAT_YCbCr_420_SP_TILED = 0x18,
+      HAL_PIXEL_FORMAT_YCbCr_420_SP       = 0x19,
+      HAL_PIXEL_FORMAT_YCrCb_420_SP_TILED = 0x1A,
+      HAL_PIXEL_FORMAT_YCrCb_422_SP       = 0x1B,
+      HAL_PIXEL_FORMAT_YCrCb_420_P        = 0x1C,
+    #endif
 };
 
 /*
diff --git a/include/utils/AndroidThreads.h b/include/utils/AndroidThreads.h
index aad1e82..8dd75b0 100644
--- a/include/utils/AndroidThreads.h
+++ b/include/utils/AndroidThreads.h
@@ -73,6 +73,9 @@ extern void androidSetCreateThreadFunc(android_create_thread_fn func);
 // ------------------------------------------------------------------
 // Extra functions working with raw pids.
 
+// Get pid for the current thread.
+extern pid_t androidGetTid();
+
 #ifdef HAVE_ANDROID_OS
 // Change the priority AND scheduling group of a particular thread.  The priority
 // should be one of the ANDROID_PRIORITY constants.  Returns INVALID_OPERATION
diff --git a/init/Android.mk b/init/Android.mk
index eb2543a..73234ae 100755
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -80,6 +80,8 @@ LOCAL_STATIC_LIBRARIES := \
     libext2_blkid \
     libext2_uuid_static
 
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_C_INCLUDES += $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/mtd
 
 # Create symlinks
 LOCAL_POST_INSTALL_CMD := $(hide) mkdir -p $(TARGET_ROOT_OUT)/sbin; \
diff --git a/init/builtins.cpp b/init/builtins.cpp
index ab7b60e..ebcf520 100644
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -43,6 +43,8 @@
 #include <cutils/partition_utils.h>
 #include <cutils/android_reboot.h>
 #include <private/android_filesystem_config.h>
+#include <sys/ioctl.h>
+#include "ubi-user.h"
 
 #include "init.h"
 #include "keywords.h"
@@ -363,7 +365,33 @@ int do_mknod(int nargs, char **args)
     return 0;
 }
 
+#define UBI_CTRL_DEV "/dev/ubi_ctrl"
+int do_ubiAttach(int nargs, char **args)
+{
+    struct ubi_attach_req req;
+    int fd;
+    int ret;
 
+    ERROR("do_ubiAttach %s %s\n",args[1],args[2]);
+
+    memset(&req, 0, sizeof(struct ubi_attach_req));
+    req.ubi_num =(typeof(req.ubi_num))atoi(args[1]);
+    if(-1 == req.ubi_num){
+        req.ubi_num = UBI_DEV_NUM_AUTO;
+    }
+    req.mtd_num = (typeof(req.mtd_num))mtd_name_to_number( args[2]);
+
+    fd = open(UBI_CTRL_DEV, O_RDONLY);
+    if(-1 == fd){
+        return -1;
+    }
+    ret = ioctl(fd, UBI_IOCATT, &req);
+    close(fd);
+    if(-1 == ret){
+        return -1;
+    }
+    return 0;
+}
 
 static struct {
     const char *name;
@@ -506,6 +534,94 @@ static int wipe_data_via_recovery()
     while (1) { pause(); }  // never reached
 }
 
+/* SPRD: add for storage manage  @{ */
+
+#define PROC_MOUNTS_FILENAME   "/proc/mounts"
+
+static int enusure_data_mounted()
+{
+    char buf[2048];
+    const char *bufp;
+    int fd;
+    ssize_t nbytes;
+    int res = -1;
+
+    /* Open and read the file contents.
+     */
+    fd = open(PROC_MOUNTS_FILENAME, O_RDONLY);
+    if (fd < 0) {
+        goto bail;
+    }
+    nbytes = read(fd, buf, sizeof(buf) - 1);
+    close(fd);
+    if (nbytes < 0) {
+        goto bail;
+    }
+    buf[nbytes] = '\0';
+
+    /* Parse the contents of the file, which looks like:
+     *
+     *     # cat /proc/mounts
+     *     rootfs / rootfs rw 0 0
+     *     /dev/pts /dev/pts devpts rw 0 0
+     *     /proc /proc proc rw 0 0
+     *     /sys /sys sysfs rw 0 0
+     *     /dev/block/mtdblock4 /system yaffs2 rw,nodev,noatime,nodiratime 0 0
+     *     /dev/block/mtdblock5 /data yaffs2 rw,nodev,noatime,nodiratime 0 0
+     *     /dev/block/mmcblk0p1 /sdcard vfat rw,sync,dirsync,fmask=0000,dmask=0000,codepage=cp437,iocharset=iso8859-1,utf8 0 0
+     *
+     * The zeroes at the end are dummy placeholder fields to make the
+     * output match Linux's /etc/mtab, but don't represent anything here.
+     */
+    bufp = buf;
+    while (nbytes > 0) {
+        char device[64];
+        char mount_point[64];
+        char filesystem[64];
+        char flags[128];
+        int matches;
+
+        /* %as is a gnu extension that malloc()s a string for each field.
+         */
+        matches = sscanf(bufp, "%63s %63s %63s %127s",
+                         device, mount_point, filesystem, flags);
+
+        if (matches == 4) {
+            device[sizeof(device)-1] = '\0';
+            mount_point[sizeof(mount_point)-1] = '\0';
+            filesystem[sizeof(filesystem)-1] = '\0';
+            flags[sizeof(flags)-1] = '\0';
+
+            if (!strncmp(mount_point, DATA_MNT_POINT, sizeof(DATA_MNT_POINT))) {
+                res = 0;
+                ERROR("/data mounted\n");
+                break;
+            }
+        } else {
+            ERROR("matches was %d on <<%.40s>>\n", matches, bufp);
+        }
+
+        /* Eat the line.
+         */
+        while (nbytes > 0 && *bufp != '\n') {
+            bufp++;
+            nbytes--;
+        }
+        if (nbytes > 0) {
+            bufp++;
+            nbytes--;
+        }
+    }
+
+    return res;
+
+bail:
+//TODO: free the strings we've allocated.
+    return res;
+}
+/* @} */
+
+
 /*
  * This function might request a reboot, in which case it will
  * not return.
@@ -563,12 +679,10 @@ int do_mount_all(int nargs, char **args)
         property_set("ro.crypto.state", "encrypted");
         property_set("ro.crypto.type", "block");
         property_set("vold.decrypt", "trigger_default_encryption");
-    } else if (ret == FS_MGR_MNTALL_DEV_NOT_ENCRYPTED) {
-        property_set("ro.crypto.state", "unencrypted");
-        /* If fs_mgr determined this is an unencrypted device, then trigger
-         * that action.
+        /* SPRD: modify for storage manage  @{
+          @orig
+           } else if (ret == 0) {
          */
-        action_for_each_trigger("nonencrypted", action_add_queue_tail);
     } else if (ret == FS_MGR_MNTALL_DEV_NEEDS_RECOVERY) {
         /* Setup a wipe via recovery, and reboot into recovery */
         ERROR("fs_mgr_mount_all suggested recovery, so wiping data via recovery.\n");
@@ -593,6 +707,13 @@ int do_mount_all(int nargs, char **args)
         property_set("vold.decrypt", "trigger_restart_min_framework");
     } else if (ret > 0) {
         ERROR("fs_mgr_mount_all returned unexpected error %d\n", ret);
+    } else if (ret == 0 || !enusure_data_mounted()) {
+/* @} */
+        property_set("ro.crypto.state", "unencrypted");
+        /* If fs_mgr determined this is an unencrypted device, then trigger
+         * that action.
+         */
+        action_for_each_trigger("nonencrypted", action_add_queue_tail);
     }
     /* else ... < 0: error */
 
@@ -936,6 +1057,17 @@ int do_wait(int nargs, char **args)
         return -1;
 }
 
+
+int do_pipe(int nargs, char **args) {
+    mode_t mode = get_mode(args[1]);
+    if (mkfifo(args[2], mode) < 0) {
+	ERROR("peter do pipe error haha\n");
+        return -errno;
+    }
+    return 0;
+
+}
+
 /*
  * Callback to make a directory from the ext4 code
  */
diff --git a/init/init.cpp b/init/init.cpp
index b332588..4104601 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -807,7 +807,7 @@ static void export_kernel_boot_props() {
         { "ro.boot.mode",       "ro.bootmode",   "unknown", },
         { "ro.boot.baseband",   "ro.baseband",   "unknown", },
         { "ro.boot.bootloader", "ro.bootloader", "unknown", },
-        { "ro.boot.hardware",   "ro.hardware",   "unknown", },
+        { "ro.boot.hardware",   "ro.hardware",   "sc8830", },
         { "ro.boot.revision",   "ro.revision",   "0", },
     };
     for (size_t i = 0; i < ARRAY_SIZE(prop_map); i++) {
diff --git a/init/init_parser.cpp b/init/init_parser.cpp
index e5793f1..db42d7b 100644
--- a/init/init_parser.cpp
+++ b/init/init_parser.cpp
@@ -178,6 +178,7 @@ static int lookup_keyword(const char *s)
         break;
     case 'p':
         if (!strcmp(s, "owerctl")) return K_powerctl;
+        if (!strcmp(s, "ipe")) return K_pipe;   //sprd add for loopback test
         break;
     case 'r':
         if (!strcmp(s, "estart")) return K_restart;
@@ -207,6 +208,7 @@ static int lookup_keyword(const char *s)
         break;
     case 'u':
         if (!strcmp(s, "ser")) return K_user;
+        if (!strcmp(s, "biattach")) return K_ubiattach;
         break;
     case 'v':
         if (!strcmp(s, "erity_load_state")) return K_verity_load_state;
diff --git a/init/keywords.h b/init/keywords.h
index 2171492..8e1fd53 100644
--- a/init/keywords.h
+++ b/init/keywords.h
@@ -15,6 +15,7 @@ int do_ifup(int nargs, char **args);
 int do_insmod(int nargs, char **args);
 int do_installkey(int nargs, char **args);
 int do_mkdir(int nargs, char **args);
+int do_ubiAttach(int nargs, char **args);
 int do_mount_all(int nargs, char **args);
 int do_mount(int nargs, char **args);
 int do_powerctl(int nargs, char **args);
@@ -39,6 +40,7 @@ int do_chmod(int nargs, char **args);
 int do_loglevel(int nargs, char **args);
 int do_load_persist_props(int nargs, char **args);
 int do_load_system_props(int nargs, char **args);
+int do_pipe(int nargs, char **args);
 int do_verity_load_state(int nargs, char **args);
 int do_verity_update_state(int nargs, char **args);
 int do_wait(int nargs, char **args);
@@ -77,8 +79,10 @@ enum {
     KEYWORD(keycodes,    OPTION,  0, 0)
     KEYWORD(load_system_props,     COMMAND, 0, do_load_system_props)
     KEYWORD(load_persist_props,    COMMAND, 0, do_load_persist_props)
+    KEYWORD(pipe,        COMMAND, 2, do_pipe)
     KEYWORD(loglevel,    COMMAND, 1, do_loglevel)
     KEYWORD(mkdir,       COMMAND, 1, do_mkdir)
+    KEYWORD(ubiattach,   COMMAND, 2, do_ubiAttach)
     KEYWORD(mount_all,   COMMAND, 1, do_mount_all)
     KEYWORD(mount,       COMMAND, 3, do_mount)
     KEYWORD(oneshot,     OPTION,  0, 0)
diff --git a/init/property_service.cpp b/init/property_service.cpp
index 5f3caa5..3793820 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -203,7 +203,9 @@ static int property_set_impl(const char* name, const char* value) {
     size_t namelen = strlen(name);
     size_t valuelen = strlen(value);
 
-    if (!is_legal_property_name(name, namelen)) return -1;
+    if (!is_legal_property_name(name, namelen)) {
+      return -1;
+    }
     if (valuelen >= PROP_VALUE_MAX) return -1;
 
     if (strcmp("selinux.reload_policy", name) == 0 && strcmp("1", value) == 0) {
diff --git a/libcutils/iosched_policy.c b/libcutils/iosched_policy.c
index 8946d3c..745e2b6 100644
--- a/libcutils/iosched_policy.c
+++ b/libcutils/iosched_policy.c
@@ -1,9 +1,10 @@
 /*
-** Copyright 2007, The Android Open Source Project
+** Copyright 2007-2014, The Android Open Source Project
+** Copyright 2015, The CyanogenMod Project
 **
-** Licensed under the Apache License, Version 2.0 (the "License"); 
-** you may not use this file except in compliance with the License. 
-** You may obtain a copy of the License at 
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
 **
 **     http://www.apache.org/licenses/LICENSE-2.0 
 **
@@ -20,28 +21,30 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <pthread.h>
 
 #include <cutils/iosched_policy.h>
+#define LOG_TAG "iosched_policy"
+#include <cutils/log.h>
+
+#define __android_unused __attribute__((__unused__))
 
 #ifdef HAVE_ANDROID_OS
 #include <linux/ioprio.h>
 #include <sys/syscall.h>
-#define __android_unused
-#else
-#define __android_unused __attribute__((__unused__))
-#endif
+#include <sys/stat.h>
+
+static int __rtio_cgroup_supported = -1;
+static pthread_once_t __rtio_init_once = PTHREAD_ONCE_INIT;
 
 int android_set_ioprio(int pid __android_unused, IoSchedClass clazz __android_unused, int ioprio __android_unused) {
-#ifdef HAVE_ANDROID_OS
     if (syscall(SYS_ioprio_set, IOPRIO_WHO_PROCESS, pid, ioprio | (clazz << IOPRIO_CLASS_SHIFT))) {
         return -1;
     }
-#endif
     return 0;
 }
 
 int android_get_ioprio(int pid __android_unused, IoSchedClass *clazz, int *ioprio) {
-#ifdef HAVE_ANDROID_OS
     int rc;
 
     if ((rc = syscall(SYS_ioprio_get, IOPRIO_WHO_PROCESS, pid)) < 0) {
@@ -50,9 +53,83 @@ int android_get_ioprio(int pid __android_unused, IoSchedClass *clazz, int *iopri
 
     *clazz = (rc >> IOPRIO_CLASS_SHIFT);
     *ioprio = (rc & 0xff);
+    return 0;
+}
+
+static void __initialize_rtio(void) {
+    if (!access("/sys/fs/cgroup/bfqio/tasks", W_OK) ||
+        !access("/sys/fs/cgroup/bfqio/rt-display/tasks", W_OK)) {
+        __rtio_cgroup_supported = 1;
+    } else {
+        __rtio_cgroup_supported = 0;
+    }
+}
+
+int android_set_rt_ioprio(int tid, int rt) {
+    int fd = -1, rc = -1;
+
+    pthread_once(&__rtio_init_once, __initialize_rtio);
+    if (__rtio_cgroup_supported != 1) {
+        return -1;
+    }
+
+    if (rt) {
+        fd = open("/sys/fs/cgroup/bfqio/rt-display/tasks", O_WRONLY | O_CLOEXEC);
+    } else {
+        fd = open("/sys/fs/cgroup/bfqio/tasks", O_WRONLY | O_CLOEXEC);
+    }
+
+    if (fd < 0) {
+        return -1;
+    }
+
+#ifdef HAVE_GETTID
+    if (tid == 0) {
+        tid = gettid();
+    }
+#endif
+
+    // specialized itoa -- works for tid > 0
+    char text[22];
+    char *end = text + sizeof(text) - 1;
+    char *ptr = end;
+    *ptr = '\0';
+    while (tid > 0) {
+        *--ptr = '0' + (tid % 10);
+        tid = tid / 10;
+    }
+
+    rc = write(fd, ptr, end - ptr);
+    if (rc < 0) {
+        /*
+         * If the thread is in the process of exiting,
+         * don't flag an error
+         */
+        if (errno == ESRCH) {
+            rc = 0;
+        } else {
+            SLOGV("android_set_rt_ioprio failed to write '%s' (%s); fd=%d\n",
+                  ptr, strerror(errno), fd);
+        }
+    }
+
+    close(fd);
+    return rc;
+}
+
 #else
+int android_set_ioprio(int pid __android_unused, IoSchedClass clazz __android_unused, int ioprio __android_unused) {
+    return 0;
+}
+
+int android_get_ioprio(int pid __android_unused, IoSchedClass *clazz, int *ioprio) {
     *clazz = IoSchedClass_NONE;
     *ioprio = 0;
-#endif
     return 0;
 }
+
+int android_set_rt_ioprio(int tid __android_unused, int rt __android_unused)
+{
+    return 0;
+}
+#endif
diff --git a/libcutils/properties.c b/libcutils/properties.c
index 4e46e02..1bc2996 100644
--- a/libcutils/properties.c
+++ b/libcutils/properties.c
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "properties"
-// #define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <stdlib.h>
 #include <string.h>
diff --git a/libsparse/output_file.c b/libsparse/output_file.c
index cd30800..da5b076 100644
--- a/libsparse/output_file.c
+++ b/libsparse/output_file.c
@@ -353,6 +353,7 @@ static int write_sparse_skip_chunk(struct output_file *out, int64_t skip_len)
 	chunk_header.reserved1 = 0;
 	chunk_header.chunk_sz = skip_len / out->block_size;
 	chunk_header.total_sz = CHUNK_HEADER_LEN;
+	chunk_header.samsung_magic = SAMSUNG_CHUNK_MAGIC;
 	ret = out->ops->write(out, &chunk_header, sizeof(chunk_header));
 	if (ret < 0)
 		return -1;
@@ -378,6 +379,7 @@ static int write_sparse_fill_chunk(struct output_file *out, unsigned int len,
 	chunk_header.reserved1 = 0;
 	chunk_header.chunk_sz = rnd_up_len / out->block_size;
 	chunk_header.total_sz = CHUNK_HEADER_LEN + sizeof(fill_val);
+	chunk_header.samsung_magic = SAMSUNG_CHUNK_MAGIC;
 	ret = out->ops->write(out, &chunk_header, sizeof(chunk_header));
 
 	if (ret < 0)
@@ -414,6 +416,7 @@ static int write_sparse_data_chunk(struct output_file *out, unsigned int len,
 	chunk_header.reserved1 = 0;
 	chunk_header.chunk_sz = rnd_up_len / out->block_size;
 	chunk_header.total_sz = CHUNK_HEADER_LEN + rnd_up_len;
+	chunk_header.samsung_magic = SAMSUNG_CHUNK_MAGIC;
 	ret = out->ops->write(out, &chunk_header, sizeof(chunk_header));
 
 	if (ret < 0)
diff --git a/libsparse/sparse_format.h b/libsparse/sparse_format.h
index c41f12a..8d0f3e9 100644
--- a/libsparse/sparse_format.h
+++ b/libsparse/sparse_format.h
@@ -30,9 +30,11 @@ typedef struct sparse_header {
   __le32	image_checksum; /* CRC32 checksum of the original data, counting "don't care" */
 				/* as 0. Standard 802.3 polynomial, use a Public Domain */
 				/* table implementation */
+  __le32  samsung_reserved;
 } sparse_header_t;
 
 #define SPARSE_HEADER_MAGIC	0xed26ff3a
+#define SAMSUNG_CHUNK_MAGIC 0xf7776f58
 
 #define CHUNK_TYPE_RAW		0xCAC1
 #define CHUNK_TYPE_FILL		0xCAC2
@@ -44,6 +46,7 @@ typedef struct chunk_header {
   __le16	reserved1;
   __le32	chunk_sz;	/* in blocks in output image */
   __le32	total_sz;	/* in bytes of chunk input file including chunk header and data */
+  __le32  samsung_magic;
 } chunk_header_t;
 
 /* Following a Raw or Fill or CRC32 chunk is data.
diff --git a/libutils/Threads.cpp b/libutils/Threads.cpp
index 1e014c6..e0c0f4f 100644
--- a/libutils/Threads.cpp
+++ b/libutils/Threads.cpp
@@ -301,6 +301,15 @@ void androidSetCreateThreadFunc(android_create_thread_fn func)
     gCreateThreadFn = func;
 }
 
+pid_t androidGetTid()
+{
+#ifdef HAVE_GETTID
+    return gettid();
+#else
+    return getpid();
+#endif
+}
+
 #ifdef HAVE_ANDROID_OS
 int androidSetThreadPriority(pid_t tid, int pri)
 {
